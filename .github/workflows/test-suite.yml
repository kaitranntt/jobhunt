name: Comprehensive Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run ESLint
        run: yarn lint

      - name: Run TypeScript check
        run: yarn typecheck

      - name: Check formatting
        run: yarn format:check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run unit tests
        run: yarn test

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: test-results/
          retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup test environment
        run: |
          echo "NODE_ENV=test" >> .env.test
          echo "TEST_SUPABASE_URL=http://localhost:54321" >> .env.test
          echo "TEST_SUPABASE_ANON_KEY=test-key" >> .env.test

      - name: Run integration tests
        run: yarn test --config vitest.integration.config.mts

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test-results/
          retention-days: 30

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run performance benchmarks
        run: yarn test --config vitest.performance.config.mts

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: reports/
          retention-days: 30

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Install Playwright
        run: yarn add -D @playwright/test

      - name: Build application
        run: yarn build

      - name: Install Playwright browsers
        run: yarn playwright install

      - name: Run E2E tests
        run: yarn playwright test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: playwright-report/
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Generate coverage report
        run: yarn test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

  build-test:
    name: Production Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run build
        run: yarn build

      - name: Check build output
        run: |
          if [ -d ".next" ]; then
            echo "✅ Build successful"
            echo "Build size: $(du -sh .next | cut -f1)"
          else
            echo "❌ Build failed"
            exit 1
          fi

  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests, integration-tests, performance-tests, e2e-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v4

      - name: Generate comprehensive test report
        run: |
          echo "# JobHunt Test Suite Report" > test-report.md
          echo "" >> test-report.md
          echo "**Generated:** $(date)" >> test-report.md
          echo "**Commit:** ${{ github.sha }}" >> test-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> test-report.md
          echo "" >> test-report.md
          echo "## Test Results" >> test-report.md
          echo "" >> test-report.md

          # Add quality checks results
          echo "### Code Quality Checks" >> test-report.md
          if [ "${{ needs.quality-checks.result }}" = "success" ]; then
            echo "✅ All quality checks passed" >> test-report.md
          else
            echo "❌ Quality checks failed" >> test-report.md
          fi
          echo "" >> test-report.md

          # Add unit test results
          echo "### Unit Tests" >> test-report.md
          if [ "${{ needs.unit-tests.result }}" = "success" ]; then
            echo "✅ Unit tests passed" >> test-report.md
          else
            echo "❌ Unit tests failed" >> test-report.md
          fi
          echo "" >> test-report.md

          # Add integration test results
          echo "### Integration Tests" >> test-report.md
          if [ "${{ needs.integration-tests.result }}" = "success" ]; then
            echo "✅ Integration tests passed" >> test-report.md
          else
            echo "❌ Integration tests failed" >> test-report.md
          fi
          echo "" >> test-report.md

          # Add performance test results
          echo "### Performance Tests" >> test-report.md
          if [ "${{ needs.performance-tests.result }}" = "success" ]; then
            echo "✅ Performance tests passed" >> test-report.md
          else
            echo "❌ Performance tests failed" >> test-report.md
          fi
          echo "" >> test-report.md

          # Add E2E test results
          echo "### E2E Tests" >> test-report.md
          if [ "${{ needs.e2e-tests.result }}" = "success" ]; then
            echo "✅ E2E tests passed" >> test-report.md
          else
            echo "❌ E2E tests failed" >> test-report.md
          fi

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test-report.md
          retention-days: 90

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests, integration-tests]
    if: github.ref == 'refs/heads/develop' && success()

    environment:
      name: staging
      url: https://staging.jobhunt.kaitran.ca

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build application
        run: yarn build

      - name: Deploy to Vercel Staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          alias: staging.jobhunt.kaitran.ca

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests, integration-tests, performance-tests, e2e-tests, build-test]
    if: github.ref == 'refs/heads/main' && success()

    environment:
      name: production
      url: https://jobhunt.kaitran.ca

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build application
        run: yarn build

      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Notify deployment success
        if: success()
        run: |
          echo "🚀 Successfully deployed to production!"
          echo "🌐 Live at: https://jobhunt.kaitran.ca"

  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests, integration-tests, performance-tests, e2e-tests]
    if: failure()

    steps:
      - name: Notify team of failure
        run: |
          echo "❌ Test suite failed on commit ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Check GitHub Actions for details"
