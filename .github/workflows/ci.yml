name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Cancel in-progress runs for same workflow + branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for commit message linting

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run ESLint
        run: yarn lint

      - name: Run TypeScript type check
        run: yarn typecheck

      - name: Run tests with coverage
        run: yarn test:coverage

      - name: Upload coverage to Codecov (optional)
        if: success()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          fail_ci_if_error: false
        continue-on-error: true

      - name: Build application
        run: yarn build
        env:
          # Use dummy values for build-time env vars
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://example.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY || 'dummy-key-for-build' }}

  commit-lint:
    name: Lint Commit Messages
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Validate commit messages
        run: |
          npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: jobhunt:ci-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [quality-gates, commit-lint, docker-build]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.quality-gates.result }}" != "success" ]]; then
            echo "Quality gates failed"
            exit 1
          fi
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ needs.commit-lint.result }}" != "success" ]]; then
            echo "Commit lint failed"
            exit 1
          fi
          if [[ "${{ needs.docker-build.result }}" != "success" ]]; then
            echo "Docker build failed"
            exit 1
          fi
          echo "All checks passed!"
